/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
      "use strict";

      function peg$subclass(child, parent) {
          function ctor() { this.constructor = child; }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
      }

      function peg$SyntaxError(message, expected, found, location) {
          this.message  = message;
          this.expected = expected;
          this.found    = found;
          this.location = location;
          this.name     = "SyntaxError";

          if (typeof Error.captureStackTrace === "function") {
              Error.captureStackTrace(this, peg$SyntaxError);
          }
      }

      peg$subclass(peg$SyntaxError, Error);

      peg$SyntaxError.buildMessage = function(expected, found) {
          var DESCRIBE_EXPECTATION_FNS = {
              literal: function(expectation) {
                  return "\"" + literalEscape(expectation.text) + "\"";
              },

              "class": function(expectation) {
                  var escapedParts = "",
                    i;

                  for (i = 0; i < expectation.parts.length; i++) {
                      escapedParts += expectation.parts[i] instanceof Array
                        ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                        : classEscape(expectation.parts[i]);
                  }

                  return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
              },

              any: function(expectation) {
                  return "any character";
              },

              end: function(expectation) {
                  return "end of input";
              },

              other: function(expectation) {
                  return expectation.description;
              }
          };

          function hex(ch) {
              return ch.charCodeAt(0).toString(16).toUpperCase();
          }

          function literalEscape(s) {
              return s
                .replace(/\\/g, '\\\\')
                .replace(/"/g,  '\\"')
                .replace(/\0/g, '\\0')
                .replace(/\t/g, '\\t')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
          }

          function classEscape(s) {
              return s
                .replace(/\\/g, '\\\\')
                .replace(/\]/g, '\\]')
                .replace(/\^/g, '\\^')
                .replace(/-/g,  '\\-')
                .replace(/\0/g, '\\0')
                .replace(/\t/g, '\\t')
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
          }

          function describeExpectation(expectation) {
              return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
          }

          function describeExpected(expected) {
              var descriptions = new Array(expected.length),
                i, j;

              for (i = 0; i < expected.length; i++) {
                  descriptions[i] = describeExpectation(expected[i]);
              }

              descriptions.sort();

              if (descriptions.length > 0) {
                  for (i = 1, j = 1; i < descriptions.length; i++) {
                      if (descriptions[i - 1] !== descriptions[i]) {
                          descriptions[j] = descriptions[i];
                          j++;
                      }
                  }
                  descriptions.length = j;
              }

              switch (descriptions.length) {
                  case 1:
                      return descriptions[0];

                  case 2:
                      return descriptions[0] + " or " + descriptions[1];

                  default:
                      return descriptions.slice(0, -1).join(", ")
                        + ", or "
                        + descriptions[descriptions.length - 1];
              }
          }

          function describeFound(found) {
              return found ? "\"" + literalEscape(found) + "\"" : "end of input";
          }

          return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
      };

      function peg$parse(input, options) {
          options = options !== void 0 ? options : {};

          var peg$FAILED = {},

            peg$startRuleFunctions = { Functions: peg$parseFunctions },
            peg$startRuleFunction  = peg$parseFunctions,

            peg$c0 = function(start, tail) { return [start, ...tail]; },
            peg$c1 = function(fnc) { return fnc; },
            peg$c2 = "def",
            peg$c3 = peg$literalExpectation("def", false),
            peg$c4 = "(",
            peg$c5 = peg$literalExpectation("(", false),
            peg$c6 = ")",
            peg$c7 = peg$literalExpectation(")", false),
            peg$c8 = ":",
            peg$c9 = peg$literalExpectation(":", false),
            peg$c10 = function(location, name, parameters, body) { return { head: "function_definition", name: name, body, parameters } },
            peg$c11 = function(head, tail) {
                var result = head ? [head] : [];
                for (var i = 0; i < tail.length; i++) {
                    result.push(tail[i]);
                }
                return result;
            },
            peg$c12 = ",",
            peg$c13 = peg$literalExpectation(",", false),
            peg$c14 = function(name) { return name },
            peg$c15 = "def Start():",
            peg$c16 = peg$literalExpectation("def Start():", false),
            peg$c17 = function(body) { return { head: "start", body: body } },
            peg$c18 = function() { return [] },
            peg$c19 = function(main, fncReturn) { return [...main, ...(fncReturn ? [fncReturn] : [])]; },
            peg$c20 = "pass",
            peg$c21 = peg$literalExpectation("pass", false),
            peg$c22 = function(lineNumber, s) { return { statement: s, location: lineNumber } },
            peg$c23 = "return number ",
            peg$c24 = peg$literalExpectation("return number ", false),
            peg$c25 = function(value) { return { head: "function_return", value }; },
            peg$c26 = "return string ",
            peg$c27 = peg$literalExpectation("return string ", false),
            peg$c28 = "return boolean ",
            peg$c29 = peg$literalExpectation("return boolean ", false),
            peg$c30 = function(action) { return { head: action } },
            peg$c31 = "fly",
            peg$c32 = peg$literalExpectation("fly", false),
            peg$c33 = "shoot",
            peg$c34 = peg$literalExpectation("shoot", false),
            peg$c35 = "left",
            peg$c36 = peg$literalExpectation("left", false),
            peg$c37 = "right",
            peg$c38 = peg$literalExpectation("right", false),
            peg$c39 = "pick_up_diamond",
            peg$c40 = peg$literalExpectation("pick_up_diamond", false),
            peg$c41 = "turn-right",
            peg$c42 = peg$literalExpectation("turn-right", false),
            peg$c43 = "turn-left",
            peg$c44 = peg$literalExpectation("turn-left", false),
            peg$c45 = "=",
            peg$c46 = peg$literalExpectation("=", false),
            peg$c47 = function(name, value) { return { head: 'setVariable', name: name, value: value } },
            peg$c48 = function(name, value) { return { head: 'setVariableNumeric', name: name, value: value } },
            peg$c49 = function(name, parameters) { return { head: "function_call_void", name, parameters }; },
            peg$c50 = "repeat",
            peg$c51 = peg$literalExpectation("repeat", false),
            peg$c52 = function(n, b) { return { head: "repeat", count: n, body: b } },
            peg$c53 = "while",
            peg$c54 = peg$literalExpectation("while", false),
            peg$c55 = function(t, b) { return { head: "while", test: t, body: b } },
            peg$c56 = "if",
            peg$c57 = peg$literalExpectation("if", false),
            peg$c58 = function(t, b, e) { return { head: "if", test: t, body: b, orelse: e} },
            peg$c59 = "else:",
            peg$c60 = peg$literalExpectation("else:", false),
            peg$c61 = function(b) { return { head: "else", body: b } },
            peg$c62 = function(s) { return s },
            peg$c63 = "not",
            peg$c64 = peg$literalExpectation("not", false),
            peg$c65 = function(value) { return { head: 'logic_not', value: value } },
            peg$c66 = function(left, op, right) { return { head: 'logic_binary', comparator: op, leftValue: left, rightValue: right } },
            peg$c67 = "is",
            peg$c68 = peg$literalExpectation("is", false),
            peg$c69 = "accessible",
            peg$c70 = peg$literalExpectation("accessible", false),
            peg$c71 = function(position) { return { head: 'tile_accessible', position: position } },
            peg$c72 = function(left, op, right) { return { head: 'numericCompare', leftValue: left, rightValue: right, comparator: op } },
            peg$c73 = function(left, op, right) { return { head: 'stringCompare', leftValue: left, rightValue: right, comparator: op } },
            peg$c74 = "true",
            peg$c75 = peg$literalExpectation("true", false),
            peg$c76 = "false",
            peg$c77 = peg$literalExpectation("false", false),
            peg$c78 = function(value) { return { head: 'constant_boolean', value: value } },
            peg$c79 = function(name, parameters) { return { head: "function_call_boolean", name, parameters }; },
            peg$c80 = function(tile, op, obj) { return { head: 'tile', position: tile, comparator: op, value: obj } },
            peg$c81 = "Tile[",
            peg$c82 = peg$literalExpectation("Tile[", false),
            peg$c83 = "]",
            peg$c84 = peg$literalExpectation("]", false),
            peg$c85 = function(x, y) { return { head: 'position_value', x: x, y: y } },
            peg$c86 = "~",
            peg$c87 = peg$literalExpectation("~", false),
            peg$c88 = function(x, y) { return { head: 'position_value_relative', x: x, y: y } },
            peg$c89 = "position of ship",
            peg$c90 = peg$literalExpectation("position of ship", false),
            peg$c91 = function(shipId) { return { head: 'get_ship_position', shipId }; },
            peg$c92 = "Ship",
            peg$c93 = peg$literalExpectation("Ship", false),
            peg$c94 = function() { return 'S' },
            peg$c95 = "Diamond",
            peg$c96 = peg$literalExpectation("Diamond", false),
            peg$c97 = function() { return 'D' },
            peg$c98 = "Meteoroid",
            peg$c99 = peg$literalExpectation("Meteoroid", false),
            peg$c100 = function() { return 'M' },
            peg$c101 = "Asteroid",
            peg$c102 = peg$literalExpectation("Asteroid", false),
            peg$c103 = function() { return 'A' },
            peg$c104 = "Wormhole",
            peg$c105 = peg$literalExpectation("Wormhole", false),
            peg$c106 = function() { return 'W' },
            peg$c107 = "TheEndOfMap",
            peg$c108 = peg$literalExpectation("TheEndOfMap", false),
            peg$c109 = function() { return 'TheEndOfMap' },
            peg$c110 = function(value) { return { head: 'constant_number', value: value }; },
            peg$c111 = ".",
            peg$c112 = peg$literalExpectation(".", false),
            peg$c113 = function(position, coordinate) { return { head: 'get_position_coordinate', position, coordinate }; },
            peg$c114 = "x",
            peg$c115 = peg$literalExpectation("x", false),
            peg$c116 = "y",
            peg$c117 = peg$literalExpectation("y", false),
            peg$c118 = function(value) { return { head: 'constant_string', value }; },
            peg$c119 = function(result) { return result; },
            peg$c120 = function(left, op, right) { return { head: 'number_binary', operator: op, leftValue: left, rightValue: right } },
            peg$c121 = function(name) { return { head: 'getNumericVariable', name: name } },
            peg$c122 = function(name, parameters) { return { head: "function_call_number", name, parameters }; },
            peg$c123 = function(value) { return { head: 'constant_string', value: value } },
            peg$c124 = "direction of ship",
            peg$c125 = peg$literalExpectation("direction of ship", false),
            peg$c126 = function(shipId) { return { head: 'get_direction_of_ship', shipId }; },
            peg$c127 = function(name, parameters) { return { head: "function_call_string", name, parameters }; },
            peg$c128 = function(name) { return { head: 'getStringVariable', name: name } },
            peg$c129 = function(value, tail) {
                const result = value ? [{ value }] : [];
                for (var i = 0; i < tail.length; i++) {
                    result.push(tail[i]);
                }
                return result;
            },
            peg$c130 = function(value) { return { value }; },
            peg$c131 = "and",
            peg$c132 = peg$literalExpectation("and", false),
            peg$c133 = "or",
            peg$c134 = peg$literalExpectation("or", false),
            peg$c135 = "equal",
            peg$c136 = peg$literalExpectation("equal", false),
            peg$c137 = function() { return "eq" },
            peg$c138 = "non-equal",
            peg$c139 = peg$literalExpectation("non-equal", false),
            peg$c140 = function() { return "nonEq" },
            peg$c141 = "==",
            peg$c142 = peg$literalExpectation("==", false),
            peg$c143 = ">=",
            peg$c144 = peg$literalExpectation(">=", false),
            peg$c145 = "<=",
            peg$c146 = peg$literalExpectation("<=", false),
            peg$c147 = "!=",
            peg$c148 = peg$literalExpectation("!=", false),
            peg$c149 = ">",
            peg$c150 = peg$literalExpectation(">", false),
            peg$c151 = "<",
            peg$c152 = peg$literalExpectation("<", false),
            peg$c153 = "+",
            peg$c154 = peg$literalExpectation("+", false),
            peg$c155 = "-",
            peg$c156 = peg$literalExpectation("-", false),
            peg$c157 = "*",
            peg$c158 = peg$literalExpectation("*", false),
            peg$c159 = "/",
            peg$c160 = peg$literalExpectation("/", false),
            peg$c161 = "^",
            peg$c162 = peg$literalExpectation("^", false),
            peg$c163 = "sqrt",
            peg$c164 = peg$literalExpectation("sqrt", false),
            peg$c165 = "contains",
            peg$c166 = peg$literalExpectation("contains", false),
            peg$c167 = "not contains",
            peg$c168 = peg$literalExpectation("not contains", false),
            peg$c169 = function() {return "notContains"},
            peg$c170 = /^[0-9]/,
            peg$c171 = peg$classExpectation([["0", "9"]], false, false),
            peg$c172 = function(digits) {
                digits[1] = digits[1].join("");
                return parseInt(digits.join(""), 10);
            },
            peg$c173 = "'",
            peg$c174 = peg$literalExpectation("'", false),
            peg$c175 = /^[^']/,
            peg$c176 = peg$classExpectation(["'"], true, false),
            peg$c177 = function(value) { return value; },
            peg$c178 = /^[a-zA-Z_]/,
            peg$c179 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
            peg$c180 = /^[a-zA-Z0-9_\-]/,
            peg$c181 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "-"], false, false),
            peg$c182 = peg$otherExpectation("optional spaces"),
            peg$c183 = /^[ \t]/,
            peg$c184 = peg$classExpectation([" ", "\t"], false, false),
            peg$c185 = peg$otherExpectation("mandatory spaces"),
            peg$c186 = peg$otherExpectation("start of line"),
            peg$c187 = "| ",
            peg$c188 = peg$literalExpectation("| ", false),
            peg$c189 = function(lineNumber) { return lineNumber },
            peg$c190 = peg$otherExpectation("end of line or file"),
            peg$c191 = "\r\n",
            peg$c192 = peg$literalExpectation("\r\n", false),
            peg$c193 = "\n",
            peg$c194 = peg$literalExpectation("\n", false),
            peg$c195 = "\r",
            peg$c196 = peg$literalExpectation("\r", false),
            peg$c197 = peg$anyExpectation(),

            peg$currPos          = 0,
            peg$savedPos         = 0,
            peg$posDetailsCache  = [{ line: 1, column: 1 }],
            peg$maxFailPos       = 0,
            peg$maxFailExpected  = [],
            peg$silentFails      = 0,

            peg$resultsCache = {},

            peg$result;

          if ("startRule" in options) {
              if (!(options.startRule in peg$startRuleFunctions)) {
                  throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
              }

              peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
          }

          function text() {
              return input.substring(peg$savedPos, peg$currPos);
          }

          function location() {
              return peg$computeLocation(peg$savedPos, peg$currPos);
          }

          function expected(description, location) {
              location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

              throw peg$buildStructuredError(
                [peg$otherExpectation(description)],
                input.substring(peg$savedPos, peg$currPos),
                location
              );
          }

          function error(message, location) {
              location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

              throw peg$buildSimpleError(message, location);
          }

          function peg$literalExpectation(text, ignoreCase) {
              return { type: "literal", text: text, ignoreCase: ignoreCase };
          }

          function peg$classExpectation(parts, inverted, ignoreCase) {
              return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
          }

          function peg$anyExpectation() {
              return { type: "any" };
          }

          function peg$endExpectation() {
              return { type: "end" };
          }

          function peg$otherExpectation(description) {
              return { type: "other", description: description };
          }

          function peg$computePosDetails(pos) {
              var details = peg$posDetailsCache[pos], p;

              if (details) {
                  return details;
              } else {
                  p = pos - 1;
                  while (!peg$posDetailsCache[p]) {
                      p--;
                  }

                  details = peg$posDetailsCache[p];
                  details = {
                      line:   details.line,
                      column: details.column
                  };

                  while (p < pos) {
                      if (input.charCodeAt(p) === 10) {
                          details.line++;
                          details.column = 1;
                      } else {
                          details.column++;
                      }

                      p++;
                  }

                  peg$posDetailsCache[pos] = details;
                  return details;
              }
          }

          function peg$computeLocation(startPos, endPos) {
              var startPosDetails = peg$computePosDetails(startPos),
                endPosDetails   = peg$computePosDetails(endPos);

              return {
                  start: {
                      offset: startPos,
                      line:   startPosDetails.line,
                      column: startPosDetails.column
                  },
                  end: {
                      offset: endPos,
                      line:   endPosDetails.line,
                      column: endPosDetails.column
                  }
              };
          }

          function peg$fail(expected) {
              if (peg$currPos < peg$maxFailPos) { return; }

              if (peg$currPos > peg$maxFailPos) {
                  peg$maxFailPos = peg$currPos;
                  peg$maxFailExpected = [];
              }

              peg$maxFailExpected.push(expected);
          }

          function peg$buildSimpleError(message, location) {
              return new peg$SyntaxError(message, null, null, location);
          }

          function peg$buildStructuredError(expected, found, location) {
              return new peg$SyntaxError(
                peg$SyntaxError.buildMessage(expected, found),
                expected,
                found,
                location
              );
          }

          function peg$parseFunctions() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 0,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseStart();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseEOL();
                  if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parseEmptyLine();
                      while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$parseEmptyLine();
                      }
                      if (s3 !== peg$FAILED) {
                          s4 = [];
                          s5 = peg$parseFunctionChained();
                          while (s5 !== peg$FAILED) {
                              s4.push(s5);
                              s5 = peg$parseFunctionChained();
                          }
                          if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c0(s1, s4);
                              s0 = s1;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionChained() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 1,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseFunction();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseEOL();
                  if (s2 !== peg$FAILED) {
                      s3 = [];
                      s4 = peg$parseEmptyLine();
                      while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          s4 = peg$parseEmptyLine();
                      }
                      if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c1(s1);
                          s0 = s1;
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunction() {
              var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

              var key    = peg$currPos * 81 + 2,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseSOL();
              if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c2) {
                      s2 = peg$c2;
                      peg$currPos += 3;
                  } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c3); }
                  }
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parse__();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parseIdentifier();
                          if (s4 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 40) {
                                  s5 = peg$c4;
                                  peg$currPos++;
                              } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
                              }
                              if (s5 !== peg$FAILED) {
                                  s6 = peg$parseFunctionDefParameters();
                                  if (s6 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                          s7 = peg$c6;
                                          peg$currPos++;
                                      } else {
                                          s7 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                      }
                                      if (s7 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 58) {
                                              s8 = peg$c8;
                                              peg$currPos++;
                                          } else {
                                              s8 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                          }
                                          if (s8 !== peg$FAILED) {
                                              s9 = peg$parseBody();
                                              if (s9 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c10(s1, s4, s6, s9);
                                                  s0 = s1;
                                              } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                              }
                                          } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                          }
                                      } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                      }
                                  } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                  }
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionDefParameters() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 3,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parse_();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseIdentifier();
                  if (s2 === peg$FAILED) {
                      s2 = null;
                  }
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parse_();
                      if (s3 !== peg$FAILED) {
                          s4 = [];
                          s5 = peg$parseFunctionDefParameterChained();
                          while (s5 !== peg$FAILED) {
                              s4.push(s5);
                              s5 = peg$parseFunctionDefParameterChained();
                          }
                          if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c11(s2, s4);
                              s0 = s1;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionDefParameterChained() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 4,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                  s1 = peg$c12;
                  peg$currPos++;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseIdentifier();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse_();
                          if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c14(s3);
                              s0 = s1;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseStart() {
              var s0, s1, s2, s3;

              var key    = peg$currPos * 81 + 5,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseSOL();
              if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 12) === peg$c15) {
                      s2 = peg$c15;
                      peg$currPos += 12;
                  } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c16); }
                  }
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseBody();
                      if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c17(s3);
                          s0 = s1;
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseEmptyProgram() {
              var s0, s1;

              var key    = peg$currPos * 81 + 6,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseEOL();
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c18();
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseSequence() {
              var s0;

              var key    = peg$currPos * 81 + 7,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseEmptySequence();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseNonEmptySequence();
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseNonEmptySequence() {
              var s0, s1, s2;

              var key    = peg$currPos * 81 + 8,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = [];
              s2 = peg$parseStatementBlock();
              while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parseStatementBlock();
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseFunctionReturnBlock();
                  if (s2 === peg$FAILED) {
                      s2 = null;
                  }
                  if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c19(s1, s2);
                      s0 = s1;
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseEmptySequence() {
              var s0, s1, s2, s3;

              var key    = peg$currPos * 81 + 9,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseSOL();
              if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c20) {
                      s2 = peg$c20;
                      peg$currPos += 4;
                  } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c21); }
                  }
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseEOL();
                      if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c18();
                          s0 = s1;
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseStatementBlock() {
              var s0, s1, s2, s3;

              var key    = peg$currPos * 81 + 10,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseSOL();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseStatement();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseEOL();
                      if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c22(s1, s2);
                          s0 = s1;
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionReturnBlock() {
              var s0, s1, s2, s3;

              var key    = peg$currPos * 81 + 11,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseSOL();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseFunctionReturn();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseEOL();
                      if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c22(s1, s2);
                          s0 = s1;
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionReturn() {
              var s0;

              var key    = peg$currPos * 81 + 12,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseFunctionReturnNumber();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseFunctionReturnString();
                  if (s0 === peg$FAILED) {
                      s0 = peg$parseFunctionReturnBoolean();
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionReturnNumber() {
              var s0, s1, s2;

              var key    = peg$currPos * 81 + 13,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 14) === peg$c23) {
                  s1 = peg$c23;
                  peg$currPos += 14;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseNumber();
                  if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c25(s2);
                      s0 = s1;
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionReturnString() {
              var s0, s1, s2;

              var key    = peg$currPos * 81 + 14,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 14) === peg$c26) {
                  s1 = peg$c26;
                  peg$currPos += 14;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c27); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseString();
                  if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c25(s2);
                      s0 = s1;
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionReturnBoolean() {
              var s0, s1, s2;

              var key    = peg$currPos * 81 + 15,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 15) === peg$c28) {
                  s1 = peg$c28;
                  peg$currPos += 15;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c29); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseTest();
                  if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c25(s2);
                      s0 = s1;
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseStatement() {
              var s0;

              var key    = peg$currPos * 81 + 16,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseCompoundStatement();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseActionStatement();
                  if (s0 === peg$FAILED) {
                      s0 = peg$parseSetStringVariableStatement();
                      if (s0 === peg$FAILED) {
                          s0 = peg$parseSetNumericVariableStatement();
                          if (s0 === peg$FAILED) {
                              s0 = peg$parseFunctionCallVoid();
                          }
                      }
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseActionStatement() {
              var s0, s1;

              var key    = peg$currPos * 81 + 17,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseActionStatementType();
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c30(s1);
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseActionStatementType() {
              var s0;

              var key    = peg$currPos * 81 + 18,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              if (input.substr(peg$currPos, 3) === peg$c31) {
                  s0 = peg$c31;
                  peg$currPos += 3;
              } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c32); }
              }
              if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c33) {
                      s0 = peg$c33;
                      peg$currPos += 5;
                  } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c34); }
                  }
                  if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c35) {
                          s0 = peg$c35;
                          peg$currPos += 4;
                      } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c36); }
                      }
                      if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c37) {
                              s0 = peg$c37;
                              peg$currPos += 5;
                          } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c38); }
                          }
                          if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 15) === peg$c39) {
                                  s0 = peg$c39;
                                  peg$currPos += 15;
                              } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c40); }
                              }
                              if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 10) === peg$c41) {
                                      s0 = peg$c41;
                                      peg$currPos += 10;
                                  } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c42); }
                                  }
                                  if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 9) === peg$c43) {
                                          s0 = peg$c43;
                                          peg$currPos += 9;
                                      } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c44); }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseSetStringVariableStatement() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 19,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseIdentifier();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 61) {
                          s3 = peg$c45;
                          peg$currPos++;
                      } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c46); }
                      }
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse__();
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseString();
                              if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c47(s1, s5);
                                  s0 = s1;
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseSetNumericVariableStatement() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 20,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseIdentifier();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 61) {
                          s3 = peg$c45;
                          peg$currPos++;
                      } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c46); }
                      }
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse__();
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseNumber();
                              if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c48(s1, s5);
                                  s0 = s1;
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionCallVoid() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 21,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseIdentifier();
              if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                      s2 = peg$c4;
                      peg$currPos++;
                  } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseFunctionCallArgs();
                      if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                              s4 = peg$c6;
                              peg$currPos++;
                          } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c7); }
                          }
                          if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c49(s1, s3);
                              s0 = s1;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseCompoundStatement() {
              var s0;

              var key    = peg$currPos * 81 + 22,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseIfStatement();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseWhileStatement();
                  if (s0 === peg$FAILED) {
                      s0 = peg$parseRepeatStatement();
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseRepeatStatement() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 23,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c50) {
                  s1 = peg$c50;
                  peg$currPos += 6;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c51); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseInteger();
                      if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                              s4 = peg$c8;
                              peg$currPos++;
                          } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c9); }
                          }
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseBody();
                              if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c52(s3, s5);
                                  s0 = s1;
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseWhileStatement() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 24,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c53) {
                  s1 = peg$c53;
                  peg$currPos += 5;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c54); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseTest();
                      if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                              s4 = peg$c8;
                              peg$currPos++;
                          } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c9); }
                          }
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseBody();
                              if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c55(s3, s5);
                                  s0 = s1;
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseIfStatement() {
              var s0, s1, s2, s3, s4, s5, s6;

              var key    = peg$currPos * 81 + 25,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c56) {
                  s1 = peg$c56;
                  peg$currPos += 2;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseTest();
                      if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                              s4 = peg$c8;
                              peg$currPos++;
                          } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c9); }
                          }
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseBody();
                              if (s5 !== peg$FAILED) {
                                  s6 = peg$parseOrelseStatementBlock();
                                  if (s6 === peg$FAILED) {
                                      s6 = null;
                                  }
                                  if (s6 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c58(s3, s5, s6);
                                      s0 = s1;
                                  } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                  }
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseOrelseStatementBlock() {
              var s0, s1, s2, s3;

              var key    = peg$currPos * 81 + 26,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseEOL();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseSOL();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseElseStatement();
                      if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c22(s2, s3);
                          s0 = s1;
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseElseStatement() {
              var s0, s1, s2;

              var key    = peg$currPos * 81 + 27,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c59) {
                  s1 = peg$c59;
                  peg$currPos += 5;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c60); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseBody();
                  if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c61(s2);
                      s0 = s1;
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseBody() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 28,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseEOL();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseINDENT();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseSequence();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parseDEDENT();
                          if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c62(s3);
                              s0 = s1;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseTest() {
              var s0;

              var key    = peg$currPos * 81 + 29,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseTileAccessibleTest();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseConstantBoolean();
                  if (s0 === peg$FAILED) {
                      s0 = peg$parseNumericCompare();
                      if (s0 === peg$FAILED) {
                          s0 = peg$parseStringCompare();
                          if (s0 === peg$FAILED) {
                              s0 = peg$parseTileContains();
                              if (s0 === peg$FAILED) {
                                  s0 = peg$parseLogicalNot();
                                  if (s0 === peg$FAILED) {
                                      s0 = peg$parseLogicalBinaryOp();
                                      if (s0 === peg$FAILED) {
                                          s0 = peg$parseFunctionCallBoolean();
                                      }
                                  }
                              }
                          }
                      }
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseLogicalNot() {
              var s0, s1, s2, s3;

              var key    = peg$currPos * 81 + 30,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 3) === peg$c63) {
                  s1 = peg$c63;
                  peg$currPos += 3;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c64); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseTest();
                      if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c65(s3);
                          s0 = s1;
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseLogicalBinaryOp() {
              var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

              var key    = peg$currPos * 81 + 31,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                  s1 = peg$c4;
                  peg$currPos++;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseTest();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse__();
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseBinLogicOp();
                              if (s5 !== peg$FAILED) {
                                  s6 = peg$parse__();
                                  if (s6 !== peg$FAILED) {
                                      s7 = peg$parseTest();
                                      if (s7 !== peg$FAILED) {
                                          s8 = peg$parse_();
                                          if (s8 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 41) {
                                                  s9 = peg$c6;
                                                  peg$currPos++;
                                              } else {
                                                  s9 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                              }
                                              if (s9 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c66(s3, s5, s7);
                                                  s0 = s1;
                                              } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                              }
                                          } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                          }
                                      } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                      }
                                  } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                  }
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseTileAccessibleTest() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 32,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c67) {
                  s1 = peg$c67;
                  peg$currPos += 2;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c68); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseTile();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse__();
                          if (s4 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 10) === peg$c69) {
                                  s5 = peg$c69;
                                  peg$currPos += 10;
                              } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c70); }
                              }
                              if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c71(s3);
                                  s0 = s1;
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseNumericCompare() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 33,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseNumber();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseRelOp();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse__();
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseNumber();
                              if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c72(s1, s3, s5);
                                  s0 = s1;
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseStringCompare() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 34,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseString();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseStringRelOp();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse__();
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseString();
                              if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c73(s1, s3, s5);
                                  s0 = s1;
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseConstantBoolean() {
              var s0, s1;

              var key    = peg$currPos * 81 + 35,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c74) {
                  s1 = peg$c74;
                  peg$currPos += 4;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c75); }
              }
              if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c76) {
                      s1 = peg$c76;
                      peg$currPos += 5;
                  } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c77); }
                  }
              }
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c78(s1);
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionCallBoolean() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 36,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseIdentifier();
              if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                      s2 = peg$c4;
                      peg$currPos++;
                  } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseFunctionCallArgs();
                      if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                              s4 = peg$c6;
                              peg$currPos++;
                          } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c7); }
                          }
                          if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c79(s1, s3);
                              s0 = s1;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseTileContains() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 37,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseTile();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseContainsOp();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse__();
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseMapObject();
                              if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c80(s1, s3, s5);
                                  s0 = s1;
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseTile() {
              var s0;

              var key    = peg$currPos * 81 + 38,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseTileAbsolute();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseTileRelative();
                  if (s0 === peg$FAILED) {
                      s0 = peg$parseTileOfShipGetter();
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseTileAbsolute() {
              var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

              var key    = peg$currPos * 81 + 39,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c81) {
                  s1 = peg$c81;
                  peg$currPos += 5;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseNumber();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse_();
                          if (s4 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 44) {
                                  s5 = peg$c12;
                                  peg$currPos++;
                              } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c13); }
                              }
                              if (s5 !== peg$FAILED) {
                                  s6 = peg$parse_();
                                  if (s6 !== peg$FAILED) {
                                      s7 = peg$parseNumber();
                                      if (s7 !== peg$FAILED) {
                                          s8 = peg$parse_();
                                          if (s8 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 93) {
                                                  s9 = peg$c83;
                                                  peg$currPos++;
                                              } else {
                                                  s9 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c84); }
                                              }
                                              if (s9 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c85(s3, s7);
                                                  s0 = s1;
                                              } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                              }
                                          } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                          }
                                      } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                      }
                                  } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                  }
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseTileRelative() {
              var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

              var key    = peg$currPos * 81 + 40,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c81) {
                  s1 = peg$c81;
                  peg$currPos += 5;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 126) {
                          s3 = peg$c86;
                          peg$currPos++;
                      } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c87); }
                      }
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parseNumber();
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parse_();
                              if (s5 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 44) {
                                      s6 = peg$c12;
                                      peg$currPos++;
                                  } else {
                                      s6 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c13); }
                                  }
                                  if (s6 !== peg$FAILED) {
                                      s7 = peg$parse_();
                                      if (s7 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 126) {
                                              s8 = peg$c86;
                                              peg$currPos++;
                                          } else {
                                              s8 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c87); }
                                          }
                                          if (s8 !== peg$FAILED) {
                                              s9 = peg$parseNumber();
                                              if (s9 !== peg$FAILED) {
                                                  s10 = peg$parse_();
                                                  if (s10 !== peg$FAILED) {
                                                      if (input.charCodeAt(peg$currPos) === 93) {
                                                          s11 = peg$c83;
                                                          peg$currPos++;
                                                      } else {
                                                          s11 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c84); }
                                                      }
                                                      if (s11 !== peg$FAILED) {
                                                          peg$savedPos = s0;
                                                          s1 = peg$c88(s4, s9);
                                                          s0 = s1;
                                                      } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                      }
                                                  } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                  }
                                              } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                              }
                                          } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                          }
                                      } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                      }
                                  } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                  }
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseTileOfShipGetter() {
              var s0, s1, s2, s3, s4, s5, s6, s7;

              var key    = peg$currPos * 81 + 41,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 5) === peg$c81) {
                  s1 = peg$c81;
                  peg$currPos += 5;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 16) === peg$c89) {
                          s3 = peg$c89;
                          peg$currPos += 16;
                      } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c90); }
                      }
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse__();
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseString();
                              if (s5 !== peg$FAILED) {
                                  s6 = peg$parse_();
                                  if (s6 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 93) {
                                          s7 = peg$c83;
                                          peg$currPos++;
                                      } else {
                                          s7 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c84); }
                                      }
                                      if (s7 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c91(s5);
                                          s0 = s1;
                                      } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                      }
                                  } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                  }
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseMapObject() {
              var s0;

              var key    = peg$currPos * 81 + 42,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseShip();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseDiamond();
                  if (s0 === peg$FAILED) {
                      s0 = peg$parseMeteoroid();
                      if (s0 === peg$FAILED) {
                          s0 = peg$parseAsteroid();
                          if (s0 === peg$FAILED) {
                              s0 = peg$parseWormhole();
                              if (s0 === peg$FAILED) {
                                  s0 = peg$parseTheEndOfMap();
                              }
                          }
                      }
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseShip() {
              var s0, s1;

              var key    = peg$currPos * 81 + 43,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 4) === peg$c92) {
                  s1 = peg$c92;
                  peg$currPos += 4;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c93); }
              }
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c94();
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseDiamond() {
              var s0, s1;

              var key    = peg$currPos * 81 + 44,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 7) === peg$c95) {
                  s1 = peg$c95;
                  peg$currPos += 7;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c96); }
              }
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c97();
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseMeteoroid() {
              var s0, s1;

              var key    = peg$currPos * 81 + 45,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 9) === peg$c98) {
                  s1 = peg$c98;
                  peg$currPos += 9;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c99); }
              }
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c100();
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseAsteroid() {
              var s0, s1;

              var key    = peg$currPos * 81 + 46,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 8) === peg$c101) {
                  s1 = peg$c101;
                  peg$currPos += 8;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c102); }
              }
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c103();
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseWormhole() {
              var s0, s1;

              var key    = peg$currPos * 81 + 47,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 8) === peg$c104) {
                  s1 = peg$c104;
                  peg$currPos += 8;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c106();
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseTheEndOfMap() {
              var s0, s1;

              var key    = peg$currPos * 81 + 48,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 11) === peg$c107) {
                  s1 = peg$c107;
                  peg$currPos += 11;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c108); }
              }
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c109();
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseNumber() {
              var s0;

              var key    = peg$currPos * 81 + 49,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseConstantNumber();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseGetCoordinateOfPosition();
                  if (s0 === peg$FAILED) {
                      s0 = peg$parseNumberBinary();
                      if (s0 === peg$FAILED) {
                          s0 = peg$parseFunctionCallNumber();
                          if (s0 === peg$FAILED) {
                              s0 = peg$parseGetNumberVariable();
                          }
                      }
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseConstantNumber() {
              var s0, s1;

              var key    = peg$currPos * 81 + 50,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseInteger();
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c110(s1);
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseGetCoordinateOfPosition() {
              var s0, s1, s2, s3;

              var key    = peg$currPos * 81 + 51,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseTile();
              if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                      s2 = peg$c111;
                      peg$currPos++;
                  } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c112); }
                  }
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseCoordinateProperty();
                      if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c113(s1, s3);
                          s0 = s1;
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseCoordinateProperty() {
              var s0;

              var key    = peg$currPos * 81 + 52,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseDirectCoordinateProperty();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseIndirectCoordinateProperty();
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseDirectCoordinateProperty() {
              var s0, s1;

              var key    = peg$currPos * 81 + 53,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 120) {
                  s1 = peg$c114;
                  peg$currPos++;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c115); }
              }
              if (s1 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 121) {
                      s1 = peg$c116;
                      peg$currPos++;
                  } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c117); }
                  }
              }
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c118(s1);
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseIndirectCoordinateProperty() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 54,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                  s1 = peg$c4;
                  peg$currPos++;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseString();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse_();
                          if (s4 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                  s5 = peg$c6;
                                  peg$currPos++;
                              } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c7); }
                              }
                              if (s5 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c119(s3);
                                  s0 = s1;
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseNumberBinary() {
              var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

              var key    = peg$currPos * 81 + 55,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                  s1 = peg$c4;
                  peg$currPos++;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseNumber();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse__();
                          if (s4 !== peg$FAILED) {
                              s5 = peg$parseNumberOp();
                              if (s5 !== peg$FAILED) {
                                  s6 = peg$parse__();
                                  if (s6 !== peg$FAILED) {
                                      s7 = peg$parseNumber();
                                      if (s7 !== peg$FAILED) {
                                          s8 = peg$parse_();
                                          if (s8 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 41) {
                                                  s9 = peg$c6;
                                                  peg$currPos++;
                                              } else {
                                                  s9 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                              }
                                              if (s9 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c120(s3, s5, s7);
                                                  s0 = s1;
                                              } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                              }
                                          } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                          }
                                      } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                      }
                                  } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                  }
                              } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                              }
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseGetNumberVariable() {
              var s0, s1;

              var key    = peg$currPos * 81 + 56,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseIdentifier();
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c121(s1);
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionCallNumber() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 57,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseIdentifier();
              if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                      s2 = peg$c4;
                      peg$currPos++;
                  } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseFunctionCallArgs();
                      if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                              s4 = peg$c6;
                              peg$currPos++;
                          } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c7); }
                          }
                          if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c122(s1, s3);
                              s0 = s1;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseString() {
              var s0;

              var key    = peg$currPos * 81 + 58,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseConstantString();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseGetShipDirection();
                  if (s0 === peg$FAILED) {
                      s0 = peg$parseFunctionCallString();
                      if (s0 === peg$FAILED) {
                          s0 = peg$parseGetStringVariable();
                      }
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseConstantString() {
              var s0, s1;

              var key    = peg$currPos * 81 + 59,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseStringValue();
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c123(s1);
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseGetShipDirection() {
              var s0, s1, s2, s3;

              var key    = peg$currPos * 81 + 60,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.substr(peg$currPos, 17) === peg$c124) {
                  s1 = peg$c124;
                  peg$currPos += 17;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c125); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseString();
                      if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c126(s3);
                          s0 = s1;
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionCallString() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 61,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseIdentifier();
              if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 40) {
                      s2 = peg$c4;
                      peg$currPos++;
                  } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c5); }
                  }
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseFunctionCallArgs();
                      if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                              s4 = peg$c6;
                              peg$currPos++;
                          } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c7); }
                          }
                          if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c127(s1, s3);
                              s0 = s1;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseGetStringVariable() {
              var s0, s1;

              var key    = peg$currPos * 81 + 62,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseIdentifier();
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c128(s1);
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionCallArgs() {
              var s0, s1, s2, s3, s4, s5;

              var key    = peg$currPos * 81 + 63,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parse_();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseString();
                  if (s2 === peg$FAILED) {
                      s2 = null;
                  }
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parse_();
                      if (s3 !== peg$FAILED) {
                          s4 = [];
                          s5 = peg$parseFunctionCallArgChained();
                          while (s5 !== peg$FAILED) {
                              s4.push(s5);
                              s5 = peg$parseFunctionCallArgChained();
                          }
                          if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c129(s2, s4);
                              s0 = s1;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseFunctionCallArgChained() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 64,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                  s1 = peg$c12;
                  peg$currPos++;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                      s3 = peg$parseString();
                      if (s3 !== peg$FAILED) {
                          s4 = peg$parse_();
                          if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c130(s3);
                              s0 = s1;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseBinLogicOp() {
              var s0, s1;

              var key    = peg$currPos * 81 + 65,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              if (input.substr(peg$currPos, 3) === peg$c131) {
                  s0 = peg$c131;
                  peg$currPos += 3;
              } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c132); }
              }
              if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c133) {
                      s0 = peg$c133;
                      peg$currPos += 2;
                  } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c134); }
                  }
                  if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 5) === peg$c135) {
                          s1 = peg$c135;
                          peg$currPos += 5;
                      } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c136); }
                      }
                      if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c137();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 9) === peg$c138) {
                              s1 = peg$c138;
                              peg$currPos += 9;
                          } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c139); }
                          }
                          if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c140();
                          }
                          s0 = s1;
                      }
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseRelOp() {
              var s0;

              var key    = peg$currPos * 81 + 66,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              if (input.substr(peg$currPos, 2) === peg$c141) {
                  s0 = peg$c141;
                  peg$currPos += 2;
              } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c142); }
              }
              if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c143) {
                      s0 = peg$c143;
                      peg$currPos += 2;
                  } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c144); }
                  }
                  if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c145) {
                          s0 = peg$c145;
                          peg$currPos += 2;
                      } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c146); }
                      }
                      if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c147) {
                              s0 = peg$c147;
                              peg$currPos += 2;
                          } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c148); }
                          }
                          if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 62) {
                                  s0 = peg$c149;
                                  peg$currPos++;
                              } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c150); }
                              }
                              if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 60) {
                                      s0 = peg$c151;
                                      peg$currPos++;
                                  } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c152); }
                                  }
                              }
                          }
                      }
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseNumberOp() {
              var s0;

              var key    = peg$currPos * 81 + 67,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              if (input.charCodeAt(peg$currPos) === 43) {
                  s0 = peg$c153;
                  peg$currPos++;
              } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c154); }
              }
              if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                      s0 = peg$c155;
                      peg$currPos++;
                  } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c156); }
                  }
                  if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 42) {
                          s0 = peg$c157;
                          peg$currPos++;
                      } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c158); }
                      }
                      if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 47) {
                              s0 = peg$c159;
                              peg$currPos++;
                          } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c160); }
                          }
                          if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 94) {
                                  s0 = peg$c161;
                                  peg$currPos++;
                              } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c162); }
                              }
                              if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c163) {
                                      s0 = peg$c163;
                                      peg$currPos += 4;
                                  } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c164); }
                                  }
                              }
                          }
                      }
                  }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseContainsOp() {
              var s0, s1;

              var key    = peg$currPos * 81 + 68,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              if (input.substr(peg$currPos, 8) === peg$c165) {
                  s0 = peg$c165;
                  peg$currPos += 8;
              } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c166); }
              }
              if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 12) === peg$c167) {
                      s1 = peg$c167;
                      peg$currPos += 12;
                  } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c168); }
                  }
                  if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c169();
                  }
                  s0 = s1;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseStringRelOp() {
              var s0;

              var key    = peg$currPos * 81 + 69,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseRelOp();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseContainsOp();
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseValue() {
              var s0;

              var key    = peg$currPos * 81 + 70,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$parseInteger();
              if (s0 === peg$FAILED) {
                  s0 = peg$parseStringValue();
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseInteger() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 71,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 45) {
                  s2 = peg$c155;
                  peg$currPos++;
              } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c156); }
              }
              if (s2 === peg$FAILED) {
                  s2 = null;
              }
              if (s2 !== peg$FAILED) {
                  s3 = [];
                  if (peg$c170.test(input.charAt(peg$currPos))) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                  } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c171); }
                  }
                  if (s4 !== peg$FAILED) {
                      while (s4 !== peg$FAILED) {
                          s3.push(s4);
                          if (peg$c170.test(input.charAt(peg$currPos))) {
                              s4 = input.charAt(peg$currPos);
                              peg$currPos++;
                          } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c171); }
                          }
                      }
                  } else {
                      s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                      s2 = [s2, s3];
                      s1 = s2;
                  } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c172(s1);
              }
              s0 = s1;

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseStringValue() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 72,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 39) {
                  s1 = peg$c173;
                  peg$currPos++;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c174); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = [];
                  if (peg$c175.test(input.charAt(peg$currPos))) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                  } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c176); }
                  }
                  while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      if (peg$c175.test(input.charAt(peg$currPos))) {
                          s4 = input.charAt(peg$currPos);
                          peg$currPos++;
                      } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c176); }
                      }
                  }
                  if (s3 !== peg$FAILED) {
                      s2 = input.substring(s2, peg$currPos);
                  } else {
                      s2 = s3;
                  }
                  if (s2 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 39) {
                          s3 = peg$c173;
                          peg$currPos++;
                      } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c174); }
                      }
                      if (s3 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c177(s2);
                          s0 = s1;
                      } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                      }
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseEmptyLine() {
              var s0, s1, s2;

              var key    = peg$currPos * 81 + 73,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$parseSOL();
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseEOL();
                  if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseIdentifier() {
              var s0, s1, s2, s3, s4;

              var key    = peg$currPos * 81 + 74,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              s1 = peg$currPos;
              if (peg$c178.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
              } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c179); }
              }
              if (s2 !== peg$FAILED) {
                  s3 = [];
                  if (peg$c180.test(input.charAt(peg$currPos))) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                  } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c181); }
                  }
                  while (s4 !== peg$FAILED) {
                      s3.push(s4);
                      if (peg$c180.test(input.charAt(peg$currPos))) {
                          s4 = input.charAt(peg$currPos);
                          peg$currPos++;
                      } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c181); }
                      }
                  }
                  if (s3 !== peg$FAILED) {
                      s2 = [s2, s3];
                      s1 = s2;
                  } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
              }
              if (s1 !== peg$FAILED) {
                  s0 = input.substring(s0, peg$currPos);
              } else {
                  s0 = s1;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parse_() {
              var s0, s1;

              var key    = peg$currPos * 81 + 75,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              peg$silentFails++;
              s0 = [];
              if (peg$c183.test(input.charAt(peg$currPos))) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c184); }
              }
              while (s1 !== peg$FAILED) {
                  s0.push(s1);
                  if (peg$c183.test(input.charAt(peg$currPos))) {
                      s1 = input.charAt(peg$currPos);
                      peg$currPos++;
                  } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c184); }
                  }
              }
              peg$silentFails--;
              if (s0 === peg$FAILED) {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c182); }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parse__() {
              var s0, s1;

              var key    = peg$currPos * 81 + 76,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              peg$silentFails++;
              s0 = [];
              if (peg$c183.test(input.charAt(peg$currPos))) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c184); }
              }
              if (s1 !== peg$FAILED) {
                  while (s1 !== peg$FAILED) {
                      s0.push(s1);
                      if (peg$c183.test(input.charAt(peg$currPos))) {
                          s1 = input.charAt(peg$currPos);
                          peg$currPos++;
                      } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c184); }
                      }
                  }
              } else {
                  s0 = peg$FAILED;
              }
              peg$silentFails--;
              if (s0 === peg$FAILED) {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c185); }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseINDENT() {
              var s0, s1, s2;

              var key    = peg$currPos * 81 + 77,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 62) {
                  s1 = peg$c149;
                  peg$currPos++;
              } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c150); }
              }
              if (s1 !== peg$FAILED) {
                  s2 = peg$parseEOL();
                  if (s2 !== peg$FAILED) {
                      s1 = [s1, s2];
                      s0 = s1;
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseDEDENT() {
              var s0;

              var key    = peg$currPos * 81 + 78,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              if (input.charCodeAt(peg$currPos) === 60) {
                  s0 = peg$c151;
                  peg$currPos++;
              } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c152); }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseSOL() {
              var s0, s1, s2;

              var key    = peg$currPos * 81 + 79,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              peg$silentFails++;
              s0 = peg$currPos;
              s1 = peg$parseInteger();
              if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c187) {
                      s2 = peg$c187;
                      peg$currPos += 2;
                  } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c188); }
                  }
                  if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c189(s1);
                      s0 = s1;
                  } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                  }
              } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
              }
              peg$silentFails--;
              if (s0 === peg$FAILED) {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c186); }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          function peg$parseEOL() {
              var s0, s1;

              var key    = peg$currPos * 81 + 80,
                cached = peg$resultsCache[key];

              if (cached) {
                  peg$currPos = cached.nextPos;

                  return cached.result;
              }

              peg$silentFails++;
              if (input.substr(peg$currPos, 2) === peg$c191) {
                  s0 = peg$c191;
                  peg$currPos += 2;
              } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c192); }
              }
              if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 10) {
                      s0 = peg$c193;
                      peg$currPos++;
                  } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c194); }
                  }
                  if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 13) {
                          s0 = peg$c195;
                          peg$currPos++;
                      } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c196); }
                      }
                      if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          peg$silentFails++;
                          if (input.length > peg$currPos) {
                              s1 = input.charAt(peg$currPos);
                              peg$currPos++;
                          } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c197); }
                          }
                          peg$silentFails--;
                          if (s1 === peg$FAILED) {
                              s0 = void 0;
                          } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                          }
                      }
                  }
              }
              peg$silentFails--;
              if (s0 === peg$FAILED) {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c190); }
              }

              peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

              return s0;
          }

          peg$result = peg$startRuleFunction();

          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
              return peg$result;
          } else {
              if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                  peg$fail(peg$endExpectation());
              }

              throw peg$buildStructuredError(
                peg$maxFailExpected,
                peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                peg$maxFailPos < input.length
                  ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                  : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
              );
          }
      }

      export {
          peg$SyntaxError as SyntaxError,
          peg$parse as parse,
      };
