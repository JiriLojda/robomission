/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
"use strict";

function peg$subclass(child, parent) {
    function ctor() {
        this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, peg$SyntaxError);
    }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function (expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
                escapedParts += expectation.parts[i] instanceof Array
                    ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                    : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function (expectation) {
            return "any character";
        },

        end: function (expectation) {
            return "end of input";
        },

        other: function (expectation) {
            return expectation.description;
        }
    };

    function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
        return s
            .replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\0/g, '\\0')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x0F]/g, function (ch) {
                return '\\x0' + hex(ch);
            })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
                return '\\x' + hex(ch);
            });
    }

    function classEscape(s) {
        return s
            .replace(/\\/g, '\\\\')
            .replace(/\]/g, '\\]')
            .replace(/\^/g, '\\^')
            .replace(/-/g, '\\-')
            .replace(/\0/g, '\\0')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x0F]/g, function (ch) {
                return '\\x0' + hex(ch);
            })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
                return '\\x' + hex(ch);
            });
    }

    function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
        var descriptions = new Array(expected.length),
            i, j;

        for (i = 0; i < expected.length; i++) {
            descriptions[i] = describeExpectation(expected[i]);
        }

        descriptions.sort();

        if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                    descriptions[j] = descriptions[i];
                    j++;
                }
            }
            descriptions.length = j;
        }

        switch (descriptions.length) {
            case 1:
                return descriptions[0];

            case 2:
                return descriptions[0] + " or " + descriptions[1];

            default:
                return descriptions.slice(0, -1).join(", ")
                    + ", or "
                    + descriptions[descriptions.length - 1];
        }
    }

    function describeFound(found) {
        return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = {Start: peg$parseStart},
        peg$startRuleFunction = peg$parseStart,

        peg$c0 = function (body) {
            return {head: "start", body: body}
        },
        peg$c1 = function () {
            return []
        },
        peg$c2 = "pass",
        peg$c3 = peg$literalExpectation("pass", false),
        peg$c4 = function (lineNumber, s) {
            return {statement: s, location: lineNumber}
        },
        peg$c5 = function (action) {
            return {head: action}
        },
        peg$c6 = "=",
        peg$c7 = peg$literalExpectation("=", false),
        peg$c8 = function (name, value) {
            return {head: 'setVariable', name: name, value: value}
        },
        peg$c9 = function (name, value) {
            return {head: 'setVariableNumeric', name: name, value: value}
        },
        peg$c10 = "repeat",
        peg$c11 = peg$literalExpectation("repeat", false),
        peg$c12 = ":",
        peg$c13 = peg$literalExpectation(":", false),
        peg$c14 = function (n, b) {
            return {head: "repeat", count: n, body: b}
        },
        peg$c15 = "while",
        peg$c16 = peg$literalExpectation("while", false),
        peg$c17 = function (t, b) {
            return {head: "while", test: t, body: b}
        },
        peg$c18 = "if",
        peg$c19 = peg$literalExpectation("if", false),
        peg$c20 = function (t, b, e) {
            return {head: "if", test: t, body: b, orelse: e}
        },
        peg$c21 = "else:",
        peg$c22 = peg$literalExpectation("else:", false),
        peg$c23 = function (b) {
            return {head: "else", body: b}
        },
        peg$c24 = function (s) {
            return s
        },
        peg$c25 = "not",
        peg$c26 = peg$literalExpectation("not", false),
        peg$c27 = function (value) {
            return {head: 'logic_not', value: value}
        },
        peg$c28 = "(",
        peg$c29 = peg$literalExpectation("(", false),
        peg$c30 = ")",
        peg$c31 = peg$literalExpectation(")", false),
        peg$c32 = function (left, op, right) {
            return {head: 'logic_binary', comparator: op, leftValue: left, rightValue: right}
        },
        peg$c33 = "isTileAccessible(",
        peg$c34 = peg$literalExpectation("isTileAccessible(", false),
        peg$c35 = function (position) {
            return {head: 'tile_accessible', position: position}
        },
        peg$c36 = function (left, op, right) {
            return {head: 'numericCompare', leftValue: left, rightValue: right, comparator: op}
        },
        peg$c37 = function (left, op, right) {
            return {head: 'stringCompare', leftValue: left, rightValue: right, comparator: op}
        },
        peg$c38 = "Tile on",
        peg$c39 = peg$literalExpectation("Tile on", false),
        peg$c40 = function (tile, op, obj) {
            return {head: 'tile', position: tile, comparator: op, value: obj}
        },
        peg$c41 = "Tile[",
        peg$c42 = peg$literalExpectation("Tile[", false),
        peg$c43 = ",",
        peg$c44 = peg$literalExpectation(",", false),
        peg$c45 = "]",
        peg$c46 = peg$literalExpectation("]", false),
        peg$c47 = function (x, y) {
            return {head: 'position_value', x: x, y: y}
        },
        peg$c48 = "TileRelative[",
        peg$c49 = peg$literalExpectation("TileRelative[", false),
        peg$c50 = function (x, y) {
            return {head: 'position_value_relative', x: x, y: y}
        },
        peg$c51 = function (value) {
            return {head: 'constant_number', value: value};
        },
        peg$c52 = function (left, op, right) {
            return {head: 'number_binary', operator: op, leftValue: left, rightValue: right}
        },
        peg$c53 = "getNumericVariable(",
        peg$c54 = peg$literalExpectation("getNumericVariable(", false),
        peg$c55 = function (name) {
            return {head: 'getNumericVariable', name: name}
        },
        peg$c56 = "true",
        peg$c57 = peg$literalExpectation("true", false),
        peg$c58 = "false",
        peg$c59 = peg$literalExpectation("false", false),
        peg$c60 = function (value) {
            return {head: 'constant_boolean', value: value}
        },
        peg$c61 = function (value) {
            return {head: 'constant_string', value: value}
        },
        peg$c62 = "getStringVariable(",
        peg$c63 = peg$literalExpectation("getStringVariable(", false),
        peg$c64 = function (name) {
            return {head: 'getStringVariable', name: name}
        },
        peg$c65 = "Ship",
        peg$c66 = peg$literalExpectation("Ship", false),
        peg$c67 = function () {
            return 'S'
        },
        peg$c68 = "Diamond",
        peg$c69 = peg$literalExpectation("Diamond", false),
        peg$c70 = function () {
            return 'D'
        },
        peg$c71 = "Meteoroid",
        peg$c72 = peg$literalExpectation("Meteoroid", false),
        peg$c73 = function () {
            return 'M'
        },
        peg$c74 = "Asteroid",
        peg$c75 = peg$literalExpectation("Asteroid", false),
        peg$c76 = function () {
            return 'A'
        },
        peg$c77 = "Wormhole",
        peg$c78 = peg$literalExpectation("Wormhole", false),
        peg$c79 = function () {
            return 'W'
        },
        peg$c80 = "TheEndOfMap",
        peg$c81 = peg$literalExpectation("TheEndOfMap", false),
        peg$c82 = function () {
            return 'TheEndOfMap'
        },
        peg$c83 = "()",
        peg$c84 = peg$literalExpectation("()", false),
        peg$c85 = function (functionName) {
            return functionName;
        },
        peg$c86 = "and",
        peg$c87 = peg$literalExpectation("and", false),
        peg$c88 = "or",
        peg$c89 = peg$literalExpectation("or", false),
        peg$c90 = "equal",
        peg$c91 = peg$literalExpectation("equal", false),
        peg$c92 = function () {
            return "eq"
        },
        peg$c93 = "non-equal",
        peg$c94 = peg$literalExpectation("non-equal", false),
        peg$c95 = function () {
            return "nonEq"
        },
        peg$c96 = "==",
        peg$c97 = peg$literalExpectation("==", false),
        peg$c98 = ">=",
        peg$c99 = peg$literalExpectation(">=", false),
        peg$c100 = "<=",
        peg$c101 = peg$literalExpectation("<=", false),
        peg$c102 = "!=",
        peg$c103 = peg$literalExpectation("!=", false),
        peg$c104 = ">",
        peg$c105 = peg$literalExpectation(">", false),
        peg$c106 = "<",
        peg$c107 = peg$literalExpectation("<", false),
        peg$c108 = "+",
        peg$c109 = peg$literalExpectation("+", false),
        peg$c110 = "-",
        peg$c111 = peg$literalExpectation("-", false),
        peg$c112 = "*",
        peg$c113 = peg$literalExpectation("*", false),
        peg$c114 = "/",
        peg$c115 = peg$literalExpectation("/", false),
        peg$c116 = "^",
        peg$c117 = peg$literalExpectation("^", false),
        peg$c118 = "sqrt",
        peg$c119 = peg$literalExpectation("sqrt", false),
        peg$c120 = "contains",
        peg$c121 = peg$literalExpectation("contains", false),
        peg$c122 = "not contains",
        peg$c123 = peg$literalExpectation("not contains", false),
        peg$c124 = function () {
            return "notContains"
        },
        peg$c125 = /^[0-9]/,
        peg$c126 = peg$classExpectation([["0", "9"]], false, false),
        peg$c127 = function (digits) {
            return parseInt(digits.join(""), 10);
        },
        peg$c128 = "'",
        peg$c129 = peg$literalExpectation("'", false),
        peg$c130 = /^[^']/,
        peg$c131 = peg$classExpectation(["'"], true, false),
        peg$c132 = function (value) {
            return value;
        },
        peg$c133 = /^[a-zA-Z_]/,
        peg$c134 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false),
        peg$c135 = /^[a-zA-Z0-9_\-]/,
        peg$c136 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "-"], false, false),
        peg$c137 = peg$otherExpectation("optional spaces"),
        peg$c138 = /^[ \t]/,
        peg$c139 = peg$classExpectation([" ", "\t"], false, false),
        peg$c140 = peg$otherExpectation("mandatory spaces"),
        peg$c141 = peg$otherExpectation("start of line"),
        peg$c142 = "| ",
        peg$c143 = peg$literalExpectation("| ", false),
        peg$c144 = function (lineNumber) {
            return lineNumber
        },
        peg$c145 = peg$otherExpectation("end of line or file"),
        peg$c146 = "\r\n",
        peg$c147 = peg$literalExpectation("\r\n", false),
        peg$c148 = "\n",
        peg$c149 = peg$literalExpectation("\n", false),
        peg$c150 = "\r",
        peg$c151 = peg$literalExpectation("\r", false),
        peg$c152 = peg$anyExpectation(),

        peg$currPos = 0,
        peg$savedPos = 0,
        peg$posDetailsCache = [{line: 1, column: 1}],
        peg$maxFailPos = 0,
        peg$maxFailExpected = [],
        peg$silentFails = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }

        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

        throw peg$buildStructuredError(
            [peg$otherExpectation(description)],
            input.substring(peg$savedPos, peg$currPos),
            location
        );
    }

    function error(message, location) {
        location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

        throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
        return {type: "literal", text: text, ignoreCase: ignoreCase};
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
        return {type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase};
    }

    function peg$anyExpectation() {
        return {type: "any"};
    }

    function peg$endExpectation() {
        return {type: "end"};
    }

    function peg$otherExpectation(description) {
        return {type: "other", description: description};
    }

    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos], p;

        if (details) {
            return details;
        } else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }

            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };

            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                } else {
                    details.column++;
                }

                p++;
            }

            peg$posDetailsCache[pos] = details;
            return details;
        }
    }

    function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos),
            endPosDetails = peg$computePosDetails(endPos);

        return {
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
    }

    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }

        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }

        peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(
            peg$SyntaxError.buildMessage(expected, found),
            expected,
            found,
            location
        );
    }

    function peg$parseStart() {
        var s0, s1;

        var key = peg$currPos * 58 + 0,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseSequence();
        if (s1 === peg$FAILED) {
            s1 = peg$parseEmptyProgram();
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseEmptyProgram() {
        var s0, s1;

        var key = peg$currPos * 58 + 1,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseEOL();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1();
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseSequence() {
        var s0, s1;

        var key = peg$currPos * 58 + 2,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseEmptySequence();
        if (s0 === peg$FAILED) {
            s0 = [];
            s1 = peg$parseStatementBlock();
            if (s1 !== peg$FAILED) {
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$parseStatementBlock();
                }
            } else {
                s0 = peg$FAILED;
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseEmptySequence() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 58 + 3,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseSOL();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c2) {
                s2 = peg$c2;
                peg$currPos += 4;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c3);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseEOL();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c1();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseStatementBlock() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 58 + 4,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseSOL();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseStatement();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseEOL();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c4(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseStatement() {
        var s0;

        var key = peg$currPos * 58 + 5,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseCompoundStatement();
        if (s0 === peg$FAILED) {
            s0 = peg$parseSimpleStatement();
            if (s0 === peg$FAILED) {
                s0 = peg$parseSetStringVariableStatement();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseSetNumericVariableStatement();
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseSimpleStatement() {
        var s0, s1;

        var key = peg$currPos * 58 + 6,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseFunctionCall();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c5(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseSetStringVariableStatement() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 58 + 7,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                    s3 = peg$c6;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseStringValue();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c8(s1, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseSetNumericVariableStatement() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 58 + 8,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                    s3 = peg$c6;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseNumber();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c9(s1, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseCompoundStatement() {
        var s0;

        var key = peg$currPos * 58 + 9,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseIfStatement();
        if (s0 === peg$FAILED) {
            s0 = peg$parseWhileStatement();
            if (s0 === peg$FAILED) {
                s0 = peg$parseRepeatStatement();
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseRepeatStatement() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 58 + 10,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c10) {
            s1 = peg$c10;
            peg$currPos += 6;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c11);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseInteger();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s4 = peg$c12;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c13);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseBody();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c14(s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseWhileStatement() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 58 + 11,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 5;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c16);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseTest();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s4 = peg$c12;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c13);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseBody();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c17(s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseIfStatement() {
        var s0, s1, s2, s3, s4, s5, s6;

        var key = peg$currPos * 58 + 12,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c18) {
            s1 = peg$c18;
            peg$currPos += 2;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c19);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseTest();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s4 = peg$c12;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c13);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseBody();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseOrelseStatementBlock();
                            if (s6 === peg$FAILED) {
                                s6 = null;
                            }
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c20(s3, s5, s6);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseOrelseStatementBlock() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 58 + 13,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseEOL();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSOL();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseElseStatement();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c4(s2, s3);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseElseStatement() {
        var s0, s1, s2;

        var key = peg$currPos * 58 + 14,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c21) {
            s1 = peg$c21;
            peg$currPos += 5;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c22);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseBody();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c23(s2);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseBody() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 58 + 15,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseEOL();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseINDENT();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseSequence();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseDEDENT();
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c24(s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseTest() {
        var s0;

        var key = peg$currPos * 58 + 16,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseCondition();
        if (s0 === peg$FAILED) {
            s0 = peg$parseLogicalNot();
            if (s0 === peg$FAILED) {
                s0 = peg$parseLogicalBinaryOp();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseConstantBoolean();
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseCondition() {
        var s0;

        var key = peg$currPos * 58 + 17,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseTileAccessibleTest();
        if (s0 === peg$FAILED) {
            s0 = peg$parseNumericCompare();
            if (s0 === peg$FAILED) {
                s0 = peg$parseStringCompare();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseTileContains();
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseLogicalNot() {
        var s0, s1, s2, s3;

        var key = peg$currPos * 58 + 18,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c25) {
            s1 = peg$c25;
            peg$currPos += 3;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c26);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseTest();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c27(s3);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseLogicalBinaryOp() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

        var key = peg$currPos * 58 + 19,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c28;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c29);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseTest();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseBinLogicOp();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseTest();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s9 = peg$c30;
                                            peg$currPos++;
                                        } else {
                                            s9 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c31);
                                            }
                                        }
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c32(s3, s5, s7);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseTileAccessibleTest() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 58 + 20,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 17) === peg$c33) {
            s1 = peg$c33;
            peg$currPos += 17;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c34);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseTile();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s5 = peg$c30;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c31);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c35(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseNumericCompare() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 58 + 21,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseNumber();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseRelOp();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseNumber();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c36(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseStringCompare() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 58 + 22,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseString();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseStringRelOp();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseString();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c37(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseTileContains() {
        var s0, s1, s2, s3, s4, s5, s6, s7;

        var key = peg$currPos * 58 + 23,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c38) {
            s1 = peg$c38;
            peg$currPos += 7;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c39);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseTile();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseContainsOp();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseMapObject();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c40(s3, s5, s7);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseTile() {
        var s0;

        var key = peg$currPos * 58 + 24,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseTileAbsolute();
        if (s0 === peg$FAILED) {
            s0 = peg$parseTileRelative();
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseTileAbsolute() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

        var key = peg$currPos * 58 + 25,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c41) {
            s1 = peg$c41;
            peg$currPos += 5;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c42);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseNumber();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c43;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c44);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseNumber();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 93) {
                                            s9 = peg$c45;
                                            peg$currPos++;
                                        } else {
                                            s9 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c46);
                                            }
                                        }
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c47(s3, s7);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseTileRelative() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

        var key = peg$currPos * 58 + 26,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 13) === peg$c48) {
            s1 = peg$c48;
            peg$currPos += 13;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c49);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseNumber();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c43;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c44);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseNumber();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 93) {
                                            s9 = peg$c45;
                                            peg$currPos++;
                                        } else {
                                            s9 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c46);
                                            }
                                        }
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c50(s3, s7);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseConstantNumber() {
        var s0, s1;

        var key = peg$currPos * 58 + 27,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseInteger();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c51(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseNumberBinary() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

        var key = peg$currPos * 58 + 28,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c28;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c29);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseNumber();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseNumberOp();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse__();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseNumber();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s9 = peg$c30;
                                            peg$currPos++;
                                        } else {
                                            s9 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c31);
                                            }
                                        }
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c52(s3, s5, s7);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseGetNumberVariable() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 58 + 29,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 19) === peg$c53) {
            s1 = peg$c53;
            peg$currPos += 19;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c54);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseStringValue();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s5 = peg$c30;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c31);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c55(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseNumber() {
        var s0;

        var key = peg$currPos * 58 + 30,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseConstantNumber();
        if (s0 === peg$FAILED) {
            s0 = peg$parseNumberBinary();
            if (s0 === peg$FAILED) {
                s0 = peg$parseGetNumberVariable();
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseConstantBoolean() {
        var s0, s1;

        var key = peg$currPos * 58 + 31,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c56) {
            s1 = peg$c56;
            peg$currPos += 4;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c57);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c58) {
                s1 = peg$c58;
                peg$currPos += 5;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c59);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c60(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseConstantString() {
        var s0, s1;

        var key = peg$currPos * 58 + 32,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseStringValue();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c61(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseGetStringVariable() {
        var s0, s1, s2, s3, s4, s5;

        var key = peg$currPos * 58 + 33,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 18) === peg$c62) {
            s1 = peg$c62;
            peg$currPos += 18;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c63);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseStringValue();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s5 = peg$c30;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c31);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c64(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseString() {
        var s0;

        var key = peg$currPos * 58 + 34,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseConstantString();
        if (s0 === peg$FAILED) {
            s0 = peg$parseGetStringVariable();
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseMapObject() {
        var s0;

        var key = peg$currPos * 58 + 35,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseShip();
        if (s0 === peg$FAILED) {
            s0 = peg$parseDiamond();
            if (s0 === peg$FAILED) {
                s0 = peg$parseMeteoroid();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseAsteroid();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseWormhole();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseTheEndOfMap();
                        }
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseShip() {
        var s0, s1;

        var key = peg$currPos * 58 + 36,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c65) {
            s1 = peg$c65;
            peg$currPos += 4;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c66);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c67();
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseDiamond() {
        var s0, s1;

        var key = peg$currPos * 58 + 37,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c68) {
            s1 = peg$c68;
            peg$currPos += 7;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c69);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c70();
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseMeteoroid() {
        var s0, s1;

        var key = peg$currPos * 58 + 38,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c71) {
            s1 = peg$c71;
            peg$currPos += 9;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c72);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c73();
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseAsteroid() {
        var s0, s1;

        var key = peg$currPos * 58 + 39,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c74) {
            s1 = peg$c74;
            peg$currPos += 8;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c75);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c76();
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseWormhole() {
        var s0, s1;

        var key = peg$currPos * 58 + 40,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c77) {
            s1 = peg$c77;
            peg$currPos += 8;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c78);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c79();
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseTheEndOfMap() {
        var s0, s1;

        var key = peg$currPos * 58 + 41,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.substr(peg$currPos, 11) === peg$c80) {
            s1 = peg$c80;
            peg$currPos += 11;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c81);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c82();
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseFunctionCall() {
        var s0, s1, s2;

        var key = peg$currPos * 58 + 42,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c83) {
                s2 = peg$c83;
                peg$currPos += 2;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c84);
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c85(s1);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseBinLogicOp() {
        var s0, s1;

        var key = peg$currPos * 58 + 43,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.substr(peg$currPos, 3) === peg$c86) {
            s0 = peg$c86;
            peg$currPos += 3;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c87);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c88) {
                s0 = peg$c88;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c89);
                }
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c90) {
                    s1 = peg$c90;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c91);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c92();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 9) === peg$c93) {
                        s1 = peg$c93;
                        peg$currPos += 9;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c94);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c95();
                    }
                    s0 = s1;
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseRelOp() {
        var s0;

        var key = peg$currPos * 58 + 44,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.substr(peg$currPos, 2) === peg$c96) {
            s0 = peg$c96;
            peg$currPos += 2;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c97);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c98) {
                s0 = peg$c98;
                peg$currPos += 2;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c99);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c100) {
                    s0 = peg$c100;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c101);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c102) {
                        s0 = peg$c102;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c103);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s0 = peg$c104;
                            peg$currPos++;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c105);
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 60) {
                                s0 = peg$c106;
                                peg$currPos++;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c107);
                                }
                            }
                        }
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseNumberOp() {
        var s0;

        var key = peg$currPos * 58 + 45,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.charCodeAt(peg$currPos) === 43) {
            s0 = peg$c108;
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c109);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
                s0 = peg$c110;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c111);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 42) {
                    s0 = peg$c112;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c113);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                        s0 = peg$c114;
                        peg$currPos++;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c115);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 94) {
                            s0 = peg$c116;
                            peg$currPos++;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c117);
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c118) {
                                s0 = peg$c118;
                                peg$currPos += 4;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c119);
                                }
                            }
                        }
                    }
                }
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseContainsOp() {
        var s0, s1;

        var key = peg$currPos * 58 + 46,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.substr(peg$currPos, 8) === peg$c120) {
            s0 = peg$c120;
            peg$currPos += 8;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c121);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 12) === peg$c122) {
                s1 = peg$c122;
                peg$currPos += 12;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c123);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c124();
            }
            s0 = s1;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseStringRelOp() {
        var s0;

        var key = peg$currPos * 58 + 47,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseRelOp();
        if (s0 === peg$FAILED) {
            s0 = peg$parseContainsOp();
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseValue() {
        var s0;

        var key = peg$currPos * 58 + 48,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$parseInteger();
        if (s0 === peg$FAILED) {
            s0 = peg$parseStringValue();
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseInteger() {
        var s0, s1, s2;

        var key = peg$currPos * 58 + 49,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = [];
        if (peg$c125.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c126);
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$c125.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c126);
                    }
                }
            }
        } else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c127(s1);
        }
        s0 = s1;

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseStringValue() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 58 + 50,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c128;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c129);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c130.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c131);
                }
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c130.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c131);
                    }
                }
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
            } else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                    s3 = peg$c128;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c129);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c132(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseIdentifier() {
        var s0, s1, s2, s3, s4;

        var key = peg$currPos * 58 + 51,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        s1 = peg$currPos;
        if (peg$c133.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c134);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$c135.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c136);
                }
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c135.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c136);
                    }
                }
            }
            if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        } else {
            s0 = s1;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parse_() {
        var s0, s1;

        var key = peg$currPos * 58 + 52,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        peg$silentFails++;
        s0 = [];
        if (peg$c138.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c139);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c138.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c139);
                }
            }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c137);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parse__() {
        var s0, s1;

        var key = peg$currPos * 58 + 53,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        peg$silentFails++;
        s0 = [];
        if (peg$c138.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c139);
            }
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                if (peg$c138.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c139);
                    }
                }
            }
        } else {
            s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c140);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseINDENT() {
        var s0, s1, s2;

        var key = peg$currPos * 58 + 54,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 62) {
            s1 = peg$c104;
            peg$currPos++;
        } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c105);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseEOL();
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseDEDENT() {
        var s0;

        var key = peg$currPos * 58 + 55,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        if (input.charCodeAt(peg$currPos) === 60) {
            s0 = peg$c106;
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c107);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseSOL() {
        var s0, s1, s2;

        var key = peg$currPos * 58 + 56,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parseInteger();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c142) {
                s2 = peg$c142;
                peg$currPos += 2;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c143);
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c144(s1);
                s0 = s1;
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c141);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    function peg$parseEOL() {
        var s0, s1;

        var key = peg$currPos * 58 + 57,
            cached = peg$resultsCache[key];

        if (cached) {
            peg$currPos = cached.nextPos;

            return cached.result;
        }

        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c146) {
            s0 = peg$c146;
            peg$currPos += 2;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c147);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
                s0 = peg$c148;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c149);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 13) {
                    s0 = peg$c150;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c151);
                    }
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    peg$silentFails++;
                    if (input.length > peg$currPos) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c152);
                        }
                    }
                    peg$silentFails--;
                    if (s1 === peg$FAILED) {
                        s0 = void 0;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
            }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c145);
            }
        }

        peg$resultsCache[key] = {nextPos: peg$currPos, result: s0};

        return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }

        throw peg$buildStructuredError(
            peg$maxFailExpected,
            peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
            peg$maxFailPos < input.length
                ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
        );
    }
}

export {
    peg$SyntaxError as SyntaxError,
    peg$parse as parse,
};
